
---> DIFFERENCE BETWEEN STATEMENTS AND EXPRESSIONS 

EXPRESSION: Essentially, an expression is a piece of code that produces a value.
example 3 + 4 is an epressions because this is gonna produce a value of 7.

The same goes for an expression of just any number ex: 1991 
another examples

true && false && !false 

----> ON THE OTHER HAND WE HAVE STATEMENTS:

STATEMENT is like a bigger piece of code that is executed and which DOES NOT 
PRODUCE A VALUE ON ITSELF. 
AND WE CAN COMPARE THIS WITH NORMAL SPOKEN LANGUAGE 

A DECLARATION IS LIKE A COMPLETE SENTENCE AND EXPRESSIONS ARE LIKE THE WORDS 
THAT MAKE UP THE SENTENCES

BASICALLY WE WRITE OUR PROGRAMS AS A SEQUENCE OF ACTIONS AND THESE ACTIONS ARE STATEMENTS 
EX: if - else statement 
    if (23 > 10) {
        const str = '23 is bigger';
    }

IT PERFORM SOME ACTIONS, IN THIS CASE DECLARING THIS VARIABLE, BUT IT DOES NOT PRODUCE A VALUE!!!

BUT THE STRING ITSELF IS AN EXPRESSION

---------> SO EXPRESSIONS PRODUCE VALUES AND STATEMENTS ARE LIKE FULL SENTENCES 
THAT TRANSLATE OUR ACTIONS - THE ACTIONS THAT WE WANT THE PROGRAM TO PERFORM 

SO BASICALLY, WHENEVER SOMETHING ENDS WITH A SEMICOLON ; THAT'S THEN A STATEMENT!!! 


--------> JavaScript EXPECTS STATEMENTS AND ExPRESSIONS IN DIFFERENT PLACES!!!
FOR EXAMPLE, IN TEMPLATE LITERAL WE CAN ONLY INSERT EPRESSIONS, BUT NOT STATEMENTS.

EXAMPLE:::: 

console.log(' I am ${2037 - 1991} years old') -> in this placeholder we need to put an expression, so something that produces 
a value which can then be put into the string that we are building here using 
template literal. 

in the case of using a variable in the template literal it is acceptable because the variable will 
essentially just be replaced with this string ${me}
const me = 'larissa'