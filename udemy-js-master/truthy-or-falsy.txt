

>>> BOLLEANS IN JAVASCRIPT  

--- FALSY VALUES ARE VALUES THAT ARE NOT EXACTLY FALSE BUT WILL BECOME FALSE WHEN WE TRY TO CONVERT THEM 
INTO A BOOLEAN 

- IN JS ARE ONLY FIVE FALSY VALUES - 

5 FALSY VALUES: 

0, '', UNDEFINED, NULL, NaN 
-> ALL THIS VALUES WILL BE CONVERTED TO FALSE WHEN WE TRY TO CONVERT THEM TO A BOOLEAN 
THEY ARE NOT EXACTLY FALSE INITIALLY BUT WILL BECOME WHEN CONVERTED TO A BOOLEAN 

EVERYTHING ELSE IS SO CALLED TRUTHY VALUES - VALUES THAT WILL BE CONVERTED TO TRUTH 
FOR EX ANY NUMBER THAT IS NO ZERO OR ANY STRING THAT IS NOT EMPTY 

IN PRATICE, THE CONVERSION TO BOOLEAN IS ALWAYS IMPLICT, NOT EXPLICT. 
IN OTHER WORDS, IS ALWAYS TYPE COERCION THAT JAVASCRIPT DOES AUTOMATICALLY BEHIND THE SCENES

- BUT WHEN EXACTLY DOES JS DO TYPE COERCION TO BOOLEANS?

IT HAPPENS IN TWO SCENARIOS:::

1 - WHEN USING LOGIC OPERATORS;

2 - IN A LOGICAL CONTEXT, FOR EXAMPLE IN A CONDITION, IF/ELSE STATEMENT 

- EXAMPLE: 

const money = 0; 

if (money){
    console.log("Don't spend it all!");
} else {
    console.log('You should get a job!!');
}

IN THIS CASE, JS CONVERTED THE VALUE IN THE MONEY VARIABLE TO A BOOLEAN FOLLOWING A 
LOGICAL CONTEXT 


- >  And we can test this in another situation - TO CHECK IF A VARIABLE IS ACTUALLY DEFINED OR NOT:

let height; 

if (height) {
    console.log('YEAH. Height is defined');
} else {
    console.log('NAY. Height is not defined');
}