
converting a string to a number or a number to a boolean is something that we have to do in 
every programming language 

--> IN JS THERE`S TYPE CONVERSION AND TYPE COERCION - 

THEY SOUND VERY SIMILAR BUT THEY ARE DIFFERENT 

-> TYPE CONVERSION IS WHEN WE MANUALLY CONVERT FROM ONE TYPE TO ANOTHER. 

-> TYPE COERCION IS WHEN JAVASCRIPT AUTOMATICALLY CONVERTS TYPES BEHIND THE SCENES FOR US - IT'S NECESSARY IN SOME SITUATIONS 
BUT IT HAPPENS IMPLICITLY, COMPLETELY HIDDEN FROM US 


1 - TYPE CONVERSION - IS WHEN WE EXPLICITLY WANT TO CONVERT FROM ONE TYPE TO ANOTHER:

const inputYear = '1991';

console.log(Number(inputYear)); -> RETURNS THE STRING AS A NUMBER 

THE ORIGINAL VALUE IS NOT CONVERTED THO 
SO THE inputYear VARIABLE ITSELF IS STILL A STRING!!!

>>>>> IF WE WANT TO CONVERT SOMETHING THAT IS IMPOSSIBLE TO BE CONVERTED LIKE A STRING WITH LETTERS TO A NUMBER 

IN THAT CASE, JS WILL RETURN THE VALUE NaN - THAT ACTUALLY MEANS 'NOT A VALID NUMBER'
WHICH MEANS THAT IT`S STILL A NUMBER SOMEHOW BUT AN INVALID ONE 


> JAVASCRIPT CAN ONLY CONVERTS TO THREE TYPES: 

SO WE CAN CONVERT TO A NUMBER, TO A STRING AND TO A BOOLEAN 

BUT IT CANNOT CONVERT SOMETHING TO UNDEFINED OR TO NULL!!! 



2 - TYPE COERCION - IS WHEN JS AUTOMATICALLY CONVERTS IT FOR US!!! 

TYPE COERCION HAPPENS WHENEVER AN OPERATOR IS DEALING WITH TWO VALUES THAT HAVE DIFFERENT TYPES 
SO JS WILL BEHIND THE SCENES CONVERT ONE VALUE SO IT CAN MATCH THE OTHER VALUE SO THAT IN THE END 
THE OPERATION CAN BE EXECUTED 

EX: 

console.log('I am ' + 23 + ' years old');

THE + OPERATOR TRIGGERS A COERCION TO STRING OF THE NUMBER 23 

SO WHENEVER WE HAVE AN OPERATION BETWEEN A STRING AND A NUMBER 
THE NUMBER WILL BE CONVERTED TO A STRING

------- ACTUALLY NOT ALL THE OPERATORS DO TYPE COERCION TO STRING 

IT ALSO WORKS WITH THE - OPERATOR EX:

console.log('23' - '10' - 3); in this case js converted string to numbers 

THE - OPERATOR DO THE OPOSITTE CONVERSION 

THE * OPERATOR TRANSFOR THE STIRNG INTO NUMBERS  