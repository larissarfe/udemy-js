--- DATA ESTRUCTION: ARRAY

ex: store friend's names into variables so I can use them later

An array is like a big container into which we can throw variables and then
later reference them 

the 2 most important data estructure, at least in JS are Arrays and Objects 

const friend1 = 'Michael';
const friend2 = 'Steven';
const friend3 = 'Peter'; 

const friends = ['Michael', 'Steven', 'Peter'];
const years = new Array(1991, 1984, 2008, 2020);

to see the number of elements of the array we use:

console.log(friends.length);
console.log(friends[friends.length -1]); - // TO SEE THE VERY LAST ITEM OF THE ARRAY

AN EXPRESSION CAN BE USED INSIDE THE [] 
AN EXPRESSION IS SOMETHING THAT PRODUCES A VALUE 

- WE COULD NOT PUT A STATEMENT INSIDE THE [] - BECAUSE JS EXPECTS AN EXPRESSION
- THE [] IS NOT ONLY FOR RETRIEVING ELEMENTS FROM THE ARRAY BUT WE CAN ALSO CHANGE IT TO ADD ELEMENTS
TO THE ARRAY 

--- TO CHANGE SOME ELEMENT IN THE ARRAY, WE CAN DO IT WITH [] TOO

EX: friends[2] = 'Jay'

----- WE DECLARED THE VARIABLE WITH CONST BUT WE STILL WERE ABLE TO CHANGE IT'S ONE ELEMENT OF THE ARRAY 

-------> ISN'T THAT A CONTRADITION? NO!!!!! BECAUSE ONLY PRIMITIVE VALUES ARE IMMUTABLE!!!
-----  BUT AN ARRAY IS NOT A PRIMITIVE VALUE!!!!!!!!!!!

=================> PRIMITIVE VALUES: 

1 - STRING;
2 - NUMBER;
3 - BOOLEAN;
4 - NULL (PRIMITIVO ESPECIAL);
5 - UNDEFINED;
6 - SYMBOL

ESSES DADOS SAO IMUTAVEIS. ENTAO QUANDO ALTERAMOS ALGUMA VARIAVEL COM 
ALGUNS DESSES DADOS É CRIADO UMA NOVA REFERENCIA NA MEMORIA. O MESMO ACONTECE
QUANDO ATRIBUIMOS UMA VARIAVEL À OUTRA.


IT WORKS THAT WAY BECAUSE OF THE WAY THAT JS STORES THINGS IN MEMORY 

SO WE CAN ACTUALLY MUTATE ARRAYS EVEN THO THEY WERE DECLARED WITH CONST!!!!

IMP:::: BUT WHAT WE CANNOT DO IS TO ACTUALLY REPLACE THE ENTIRE ARRAY.
FOR EX: friends = ['Bob', 'Alice']

---------------------------------------------------------

---> A LITTLE EXERCISE WITH ARRAYS: 

const age1 = calcAge(friends[0]) -> NEED TO PUT THE INDEX POSITION