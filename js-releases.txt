
----> JAVASCRIPT RELEASES: ES5, ES6+ AND ESNEXT

how JS releases work and how we can use them: 

JS HISTORY:

- With the invention of the internet, it was needed a programming 
language for the browser 

- The language was submitted to an independent standard organization called ECMA 

- With a need to standardize the language, ECMA releases ECMAScript 1 (ES1), the first official standard 
for JavaScript (ECMAScript is the standard, JavaScript is the language in practice)

- With the ECMA1 every browser could now implement the same standard JavaScript 

- In the real world we usually use the term ECMAScript to refer to the standard, while JavaScript 
is used when we talk about the language in practice, as it's implemented in browsers

- ES6 was launch in June, 2015 

- Now ECMAScript changes to an annual release cycle in order to ship less features per update

--------> BACKWARDS COMPATIBILITY: DON'T BREAK THE WEB!! 

- Backwards compatibility all the way to ES1 - IT MEANS THAT IF YOU WERE TO TAKE 
SOME JS CODE WRITTEN BACK IN 1997 AND PUT IT IN A MODERN BROWSER WITH A MODERN JS ENGINE TODAY,
IT WOULD STILL WORK JUST THE SAME 

    And it works this way because of the fundamental principle that's baked into the 
    JS language and it's development, which is to not break the web ( this means that there is almost never anything removed from the language,
    but only added in new versions.) for example: - OLD FEATURES ARE NEVER REMOVED; 
    - NOT REALLY NEW VERSIONS, JUST  INCREMENTAL UPDATES -RELEASES;
    - Websites keep working forever!!!)

    WE CANNOT CALL THE CHANGES IN THE LANGUAGE NEW VERSIONS BECAUSE THEY DO NOT CONTAIN 
    BREAKING CHANGES LIKE WHEN OTHER LANGUAGES MOVED TO A NEW VERSION 


- Old code works in the browser today because of the fundamental principle that's baked into de JS language and it's development, WHICH IS TO NOT BREAK THE WEB 

DON'T BREAK THE WEB = THIS MEANS THAT THERE IS ALMOST NEVER ANYTHING REMOVED FROM THE LANGUAGE, BUT ONLY ADDED IN NEW VERSIONS
                    - OLD FEATURES ARE NEVER REMOVED; 
                    - NOT REALLY NEW VERSIONS, JUST INCREMENTAL UPDATES (RELEASES)
                    - WEBSITES KEEP WORKING FOREVER!!! 


OBS: JS IS NOT FORWARDS COMPATIBLE - BECAUSE CURRENT BROWSERS DO NOT UNDERSTAND CODE FROM THE FUTURE.

IMP ------> SO HOW CAN WE USE MODERN JS TODAY? BECAUSE BROWSERS THAT USERS ARE USING MIGHT BE OLD AND THERE'S NO FORWARDS COMPATIBILITY!!!

TO ANSWER THE QUESTION, WE NEED TO CONSIDER TWO DISTINCT SCENARIOS:

1 - DEVELOPMENT: During the development - SIMPLY USE THE LATEST GOOGLE CHROME!!

2 - PRODUCTION: During production - USE BABEL TO TRANSPILE AND POLYFILL YOUR CODE (CONVERTING BACK TO ES5 TO ENSURE BROWSER COMPATIBILITY FOR ALL USERS)
production is when you deploy your application on the internet to run in the user's browser 

- THAT'S WHEN PROBLEMS MIGHT APPEAR - WE CANNOT CONTROL WHICH BROWSER THE USER USES 

- THE ES5 VERSION IS FULLY SUPPORTED IN ALL BROWSERS(down to IE 9 from 2011)
- READY TO BE USED TODAY 

ES6+ IS WHERE TRANSPILLING COMES IN 
ES6/ES2015 -- ES2020 -> ES6+ WELL SUPPORTED IN ALL MODERN BROWSERS; 
                        NOT SUPPORTED IN OLDER BROWSERS;
                        CAN USE MOST FEATURES IN PRODUCTION WITH TRANSPILLING AND POLYFILLING



ES2021 - forever -> ESNext: Future versions of the language (new feature proposals that reach Stage 4)
                    Can already use SOME features in production with transpiling and polyfilling


